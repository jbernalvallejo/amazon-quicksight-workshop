Mappings: 
  RegionMap: 
    eu-west-1: 
      "HVM64": "ami-06ce3edf0cff21f07"
    us-west-2: 
      "HVM64": "ami-0d6621c01e8c2de2c"
    us-east-1: 
      "HVM64": "ami-0323c3dd2da7fb37d"

Resources:
  QuicksightLabBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "quicksight-lab-data-lake-${AWS::Region}-${AWS::AccountId}"
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
    DeletionPolicy: Retain

  AthenaResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "quicksight-lab-athena-results-${AWS::Region}-${AWS::AccountId}"
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
    DeletionPolicy: Retain

  EC2toS3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "quicksight-lab-EC2toS3Role-${AWS::Region}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  EC2AthenaSettingsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "quicksight-lab-AthenaPolicy${AWS::Region}-${AWS::AccountId}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'athena:*'
            Resource: '*'
      Roles:
        - !Ref EC2toS3Role

  EC2StartCrawlerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "quicksight-lab-GlueCrawlerPolicy-${AWS::Region}-${AWS::AccountId}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'glue:*'
            Resource:
              Fn::Join:
              - ""
              - 
                - "arn:aws:glue:"
                - !Ref 'AWS::Region'
                - ":"
                - !Ref 'AWS::AccountId'
                - ":crawler/"
                - !Ref SportTicketsDatabaseCrawler
      Roles:
        - !Ref EC2toS3Role

  DataLakeS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "quicksight-lab-S3Policy-${AWS::Region}-${AWS::AccountId}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: 
              Fn::Join:
              - ""
              - 
                - !GetAtt QuicksightLabBucket.Arn
                - "/*"
      Roles:
        - !Ref EC2toS3Role
        - !Ref SportTicketsDatabaseCrawlerRole

  EC2toS3PolicyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2toS3Role

  DataLakeLoaderEC2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref EC2toS3PolicyInstanceProfile
      DisableApiTermination: false
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: t3.2xlarge
      Monitoring: true
      UserData: !Base64
        Fn::Sub:
        - |
          #!/bin/bash -ex
          yum update -y
          yum install -y git
          cd /home/ec2-user
          git clone https://github.com/jbernalvallejo/amazon-quicksight-workshop.git
          cd amazon-quicksight-workshop/parquet/sampledb/v1
          aws s3 cp . s3://${BucketName}/${GlueDatabase}/parquet --recursive
          export AWS_DEFAULT_REGION=${AWS::Region}
          aws glue start-crawler --name ${CrawlerName}
        -
          BucketName: !Ref QuicksightLabBucket
          GlueDatabase: !Ref SportTicketsDatabase
          CrawlerName: !Ref SportTicketsDatabaseCrawler
          AthenaBucket: !Sub
            - s3://${AthenaBucketName}/
            - { AthenaBucketName: !Ref AthenaResultsBucket } 
    DependsOn: SportTicketsDatabaseCrawler
        
  SportTicketsDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: ticketdata
        Description: Database to hold tables for sport ticket data

  SportTicketsDatabaseCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "quicksight-lab-GlueCrawlerRole-${AWS::Region}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole

  SportTicketsDatabaseCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: quicksight-lab-parquet-crawler    
      DatabaseName: !Ref SportTicketsDatabase
      TablePrefix: parquet_
      Role: !GetAtt SportTicketsDatabaseCrawlerRole.Arn
      Targets:
        S3Targets:
          - Path: !Ref QuicksightLabBucket
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"

  SportingEventInfoView:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref SportTicketsDatabase
      TableInput:
        Name: sporting_event_info
        Parameters: {
          "comment": "Presto View",
          "presto_view": "true"
        }
        Retention: 0
        StorageDescriptor:
          NumberOfBuckets: 0
          Location: ""
          Compressed: false
          StoredAsSubDirectories: false
          SerdeInfo: {}
          Columns:
            - Name: event_id
              Type: bigint
            - Name: sport
              Type: string
            - Name: event_date_time
              Type: timestamp
            - Name: home_team
              Type: string
            - Name: away_team
              Type: string
            - Name: location
              Type: string
            - Name: city
              Type: string
        TableType: VIRTUAL_VIEW
        ViewExpandedText: "/* Presto View */"
        ViewOriginalText: "/* Presto View: eyJvcmlnaW5hbFNxbCI6IlNFTEVDVFxuICBcImVcIi5cImlkXCIgXCJldmVudF9pZFwiXG4sIFwiZVwiLlwic3BvcnRfdHlwZV9uYW1lXCIgXCJzcG9ydFwiXG4sIFwiZVwiLlwic3RhcnRfZGF0ZV90aW1lXCIgXCJldmVudF9kYXRlX3RpbWVcIlxuLCBcImhcIi5cIm5hbWVcIiBcImhvbWVfdGVhbVwiXG4sIFwiYVwiLlwibmFtZVwiIFwiYXdheV90ZWFtXCJcbiwgXCJsXCIuXCJuYW1lXCIgXCJsb2NhdGlvblwiXG4sIFwibFwiLlwiY2l0eVwiXG5GUk9NXG4gIHBhcnF1ZXRfc3BvcnRpbmdfZXZlbnQgZVxuLCBwYXJxdWV0X3Nwb3J0X3RlYW0gaFxuLCBwYXJxdWV0X3Nwb3J0X3RlYW0gYVxuLCBwYXJxdWV0X3Nwb3J0X2xvY2F0aW9uIGxcbldIRVJFICgoKFwiZVwiLlwiaG9tZV90ZWFtX2lkXCIgPSBcImhcIi5cImlkXCIpIEFORCAoXCJlXCIuXCJhd2F5X3RlYW1faWRcIiA9IFwiYVwiLlwiaWRcIikpIEFORCAoXCJlXCIuXCJsb2NhdGlvbl9pZFwiID0gXCJsXCIuXCJpZFwiKSlcbiIsImNhdGFsb2ciOiJhd3NkYXRhY2F0YWxvZyIsInNjaGVtYSI6InRpY2tldGRhdGEiLCJjb2x1bW5zIjpbeyJuYW1lIjoiZXZlbnRfaWQiLCJ0eXBlIjoiYmlnaW50In0seyJuYW1lIjoic3BvcnQiLCJ0eXBlIjoidmFyY2hhciJ9LHsibmFtZSI6ImV2ZW50X2RhdGVfdGltZSIsInR5cGUiOiJ0aW1lc3RhbXAifSx7Im5hbWUiOiJob21lX3RlYW0iLCJ0eXBlIjoidmFyY2hhciJ9LHsibmFtZSI6ImF3YXlfdGVhbSIsInR5cGUiOiJ2YXJjaGFyIn0seyJuYW1lIjoibG9jYXRpb24iLCJ0eXBlIjoidmFyY2hhciJ9LHsibmFtZSI6ImNpdHkiLCJ0eXBlIjoidmFyY2hhciJ9XX0= */"
    DependsOn: DataLakeLoaderEC2

  SportingEventTicketInfoView:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref SportTicketsDatabase
      TableInput:
        Name: sporting_event_ticket_info
        Parameters: {
          "comment": "Presto View",
          "presto_view": "true"
        }
        Retention: 0
        StorageDescriptor:
          NumberOfBuckets: 0
          Location: ""
          Compressed: false
          StoredAsSubDirectories: false
          SerdeInfo: {}
          Columns:
            - Name: ticket_id
              Type: double
            - Name: event_id
              Type: bigint
            - Name: sport
              Type: string
            - Name: event_date_time
              Type: timestamp
            - Name: home_team
              Type: string
            - Name: away_team
              Type: string
            - Name: location
              Type: string
            - Name: city
              Type: string
            - Name: seat_level
              Type: bigint
            - Name: seat_section
              Type: bigint
            - Name: seat_row
              Type: string
            - Name: seat
              Type: bigint
            - Name: ticket_price
              Type: double
            - Name: ticketholder
              Type: string
        TableType: VIRTUAL_VIEW
        ViewExpandedText: "/* Presto View */"
        ViewOriginalText: "/* Presto View: eyJvcmlnaW5hbFNxbCI6IlNFTEVDVFxuICBcInRcIi5cImlkXCIgXCJ0aWNrZXRfaWRcIlxuLCBcImVcIi5cImV2ZW50X2lkXCJcbiwgXCJlXCIuXCJzcG9ydFwiXG4sIFwiZVwiLlwiZXZlbnRfZGF0ZV90aW1lXCJcbiwgXCJlXCIuXCJob21lX3RlYW1cIlxuLCBcImVcIi5cImF3YXlfdGVhbVwiXG4sIFwiZVwiLlwibG9jYXRpb25cIlxuLCBcImVcIi5cImNpdHlcIlxuLCBcInRcIi5cInNlYXRfbGV2ZWxcIlxuLCBcInRcIi5cInNlYXRfc2VjdGlvblwiXG4sIFwidFwiLlwic2VhdF9yb3dcIlxuLCBcInRcIi5cInNlYXRcIlxuLCBcInRcIi5cInRpY2tldF9wcmljZVwiXG4sIFwicFwiLlwiZnVsbF9uYW1lXCIgXCJ0aWNrZXRob2xkZXJcIlxuRlJPTVxuICBzcG9ydGluZ19ldmVudF9pbmZvIGVcbiwgcGFycXVldF9zcG9ydGluZ19ldmVudF90aWNrZXQgdFxuLCBwYXJxdWV0X3BlcnNvbiBwXG5XSEVSRSAoKFwidFwiLlwic3BvcnRpbmdfZXZlbnRfaWRcIiA9IFwiZVwiLlwiZXZlbnRfaWRcIikgQU5EIChcInRcIi5cInRpY2tldGhvbGRlcl9pZFwiID0gXCJwXCIuXCJpZFwiKSlcbiIsImNhdGFsb2ciOiJhd3NkYXRhY2F0YWxvZyIsInNjaGVtYSI6InRpY2tldGRhdGEiLCJjb2x1bW5zIjpbeyJuYW1lIjoidGlja2V0X2lkIiwidHlwZSI6ImRvdWJsZSJ9LHsibmFtZSI6ImV2ZW50X2lkIiwidHlwZSI6ImJpZ2ludCJ9LHsibmFtZSI6InNwb3J0IiwidHlwZSI6InZhcmNoYXIifSx7Im5hbWUiOiJldmVudF9kYXRlX3RpbWUiLCJ0eXBlIjoidGltZXN0YW1wIn0seyJuYW1lIjoiaG9tZV90ZWFtIiwidHlwZSI6InZhcmNoYXIifSx7Im5hbWUiOiJhd2F5X3RlYW0iLCJ0eXBlIjoidmFyY2hhciJ9LHsibmFtZSI6ImxvY2F0aW9uIiwidHlwZSI6InZhcmNoYXIifSx7Im5hbWUiOiJjaXR5IiwidHlwZSI6InZhcmNoYXIifSx7Im5hbWUiOiJzZWF0X2xldmVsIiwidHlwZSI6ImJpZ2ludCJ9LHsibmFtZSI6InNlYXRfc2VjdGlvbiIsInR5cGUiOiJiaWdpbnQifSx7Im5hbWUiOiJzZWF0X3JvdyIsInR5cGUiOiJ2YXJjaGFyIn0seyJuYW1lIjoic2VhdCIsInR5cGUiOiJiaWdpbnQifSx7Im5hbWUiOiJ0aWNrZXRfcHJpY2UiLCJ0eXBlIjoiZG91YmxlIn0seyJuYW1lIjoidGlja2V0aG9sZGVyIiwidHlwZSI6InZhcmNoYXIifV19 */"
    DependsOn: SportingEventInfoView

  # Athena workgroups section
  S3BucketWorkgroupA:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256

  S3BucketWorkgroupB:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256

  BusinessAnalystUserPolicy:
    Type: AWS::IAM::ManagedPolicy  
    Properties:
      Description: Policy for providing required access to the business analyst user
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: 'athena:ListWorkGroups'
          Resource: '*'
        - Effect: Allow
          Action:
          - s3:ListBucketMultipartUploads
          - athena:StartQueryExecution
          - athena:GetQueryResultsStream
          - athena:GetQueryResults
          - s3:CreateBucket
          - s3:ListBucket
          - athena:DeleteNamedQuery
          - athena:GetNamedQuery
          - athena:ListTagsForResource
          - athena:ListQueryExecutions
          - s3:ListMultipartUploadParts
          - athena:ListNamedQueries
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectAcl
          - athena:GetWorkGroup
          - athena:CreateNamedQuery
          - s3:AbortMultipartUpload
          - athena:StopQueryExecution
          - athena:GetQueryExecution
          - athena:BatchGetNamedQuery
          - s3:GetBucketLocation
          - athena:BatchGetQueryExecution
          Resource:
          - Fn::Join:
            - ''
            - - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: S3BucketWorkgroupA
              - "/*"
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3BucketWorkgroupA
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: QuicksightLabBucket
          - Fn::Join:
            - ''
            - - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: QuicksightLabBucket
              - "/*"
          - Fn::Join:
            - ":"
            - - arn:aws:athena
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - workgroup/workgroupA
        - Effect: Allow
          Action: athena:GetQueryExecutions
          Resource:
            Fn::Join:
            - ":"
            - - arn:aws:athena
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - workgroup/workgroupA                
        - Effect: Allow
          Action: athena:GetQueryExecutions
          Resource:
            Fn::Join:
            - ":"
            - - arn:aws:athena
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - workgroup/workgroupA

  WorkgroupManagerUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for providing only manager access to workgroup manager user for WorkgroupA and WorkgroupB
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - athena:ListWorkGroups
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:ListBucketMultipartUploads
          - s3:CreateBucket
          - s3:ListBucket
          - s3:ListMultipartUploadParts
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:GetBucketLocation
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3BucketWorkgroupA
          - Fn::Join:
            - ''
            - - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: S3BucketWorkgroupA
              - "/*"
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3BucketWorkgroupB
          - Fn::Join:
            - ''
            - - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: S3BucketWorkgroupB
              - "/*"
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: QuicksightLabBucket
          - Fn::Join:
            - ''
            - - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: QuicksightLabBucket
              - "/*"
          - Fn::Join:
            - ":"
            - - arn:aws:athena
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - workgroup/workgroupA
          - Fn::Join:
            - ":"
            - - arn:aws:athena
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - workgroup/workgroupB
        - Effect: Allow
          Action:
          - athena:DeleteWorkGroup
          - athena:UpdateWorkGroup
          - athena:GetWorkGroup
          - athena:CreateWorkGroup
          - athena:GetExecutionEngine
          - athena:GetExecutionEngines
          - athena:GetNamespace
          - athena:GetCatalogs
          - athena:GetNamespaces
          - athena:GetTables
          - athena:GetTable
          Resource:
          - Fn::Join:
            - ":"
            - - arn:aws:athena
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - workgroup/workgroupA
          - Fn::Join:
            - ":"
            - - arn:aws:athena
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - workgroup/workgroupB

  BusinessAnalystUser:
    Type: AWS::IAM::User   
    Properties:
      ManagedPolicyArns: 
        - !Ref BusinessAnalystUserPolicy
      LoginProfile:
        Password: master123

  WorkgroupManagerUser:
    Type: AWS::IAM::User   
    Properties:
      ManagedPolicyArns:
        - !Ref WorkgroupManagerUserPolicy
      LoginProfile:
        Password: master123    

Outputs:
  AthenaResultsBucket:
    Description: S3 bucket to configure in Athena Settings to store query results
    Value: !Sub
      - s3://${BucketName}/
      - { BucketName: !Ref AthenaResultsBucket }

  S3BucketWorkgroupA:
    Description: S3 bucket to Workgroup A
    Value: !Ref S3BucketWorkgroupA

  S3BucketWorkgroupB:
    Description: S3 bucket to Workgroup B
    Value: !Ref S3BucketWorkgroupB